@page "/"

@using Vds.Data
@using Vds.Services
@inject IPersonService _service
@inject IJSRuntime jsRuntime

<h1>Person List</h1>

@if (_personList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in _personList)
            {
                <tr>
                    <td>@person.FirstName</td>
                    <td>@person.LastName</td>
                    <td>@person.Email</td>
                    <td>@person.Status</td>
                    <td>
                        <input type="button" class="btn btn-primary" @onclick="(() => PrepareForEdit(person))" data-toggle="modal" data-target="#personModal" value="Edit"/>
                        <input type="button" class="btn btn-danger" @onclick="(() => PrepareForDelete(person))" data-toggle="modal" data-target="#confirmDeleteModal" value="Delete" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
<div>
    <input type="button" data-toggle="modal" data-target="#personModal" class="btn btn-primary" value="Add Person" @onclick="(InitializePerson)" />
</div>

<ConfirmDialog OnClick="@Delete" />
<PersonDetail Person=_person DataChanged="@DataChanged">
    <CustomHeader>@_customHeader</CustomHeader>
</PersonDetail>

@code {
    private List<Person> _personList;
    private Person _person = new Person();
    private string _customHeader = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        _personList = await _service.GetAll();
    }

    private void InitializePerson()
    {
        _person = new Person();
        _customHeader = "Add Person";
    }

    private void PrepareForEdit(Person person)
    {
        _customHeader = "Edit Person";
        _person = person;
    }

    private void PrepareForDelete(Person person)
    {
        _person = person;
    }

    private async Task Delete()
    {
        var task = await _service.Delete(_person.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        _personList = await _service.GetAll();
        _person = new Person();
    }

    private async void DataChanged()
    {
        _personList = await _service.GetAll();
        StateHasChanged();
    }
}
