@using Vds.Data
@using Vds.Services
@inject IPersonService _service
@inject IJSRuntime jsRuntime


<div class="modal" tabindex="-1" role="dialog" id="personModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@CustomHeader</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Person" OnValidSubmit="@HandleValidSubmit" Context="formContext">
                    <DataAnnotationsValidator />
                    @*<ValidationSummary />*@
                    <div class="form-group">
                        <label for="firstName">First Name</label>
                        <input type="hidden" @bind-value="@Person.Id" />
                        <InputText id="firstName" class="form-control" @bind-Value="@Person.FirstName" />
                        <ValidationMessage For="@(() => Person.FirstName)" />
                    </div>
                    
                    <div class="form-group">
                        <label for="lastName">Last Name</label>
                        <InputText id="lastName" class="form-control" @bind-Value="@Person.LastName" />
                        <ValidationMessage For="@(() => Person.LastName)" />
                    </div>
                    
                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText id="email" class="form-control" @bind-Value="@Person.Email" />
                        <ValidationMessage For="@(() => Person.Email)" />
                    </div>

                    <button type="submit" class="btn btn-primary">Submit</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public Person Person { get; set; }

    [Parameter]
    public Action DataChanged { get; set; }

    [Parameter]
    public RenderFragment CustomHeader { get; set; }

    //private ToDo person = new ToDo();
    //List<string> PersonStatusList = new List<string>() { "New", "In Progress", "Completed" };

    private async Task ClosePersonModal()
    {
        await jsRuntime.InvokeAsync<object>("CloseModal", "personModal");
    }


    private async void HandleValidSubmit()
    {
        if (string.IsNullOrEmpty(Person.Id))
        {
            Person.Id = Guid.NewGuid().ToString();
            await _service.Add(Person);
        }
        else
        {
            await _service.Update(Person);
        }

        await ClosePersonModal();
        DataChanged?.Invoke(); 
    }

}


